Imports Microsoft.VisualBasic
Imports SmartMassEmail.Entities
Imports SmartMassEmail.Providers
Imports SmartMassEmail.ImplementedProviders
Imports System.Threading
Imports SMInformatik.Util

Public Class EMailUtilities

    Public Const TASK_NOTIFICATION_DISPLAY_NAME = "Timesheet Notification"
    Public Const TIMESHEET_APPROVED_NOTIFICATION_INFORMATION_FROM = "Timesheet Approved Notification"
    Public Const TIMESHEET_REJECTED_NOTIFICATION_INFORMATION_FROM = "Timesheet Rejected Notification"
    Public Const TIMESHEET_APPROVAL_PENDING_NOTIFICATION_INFORMATION_FROM = "Timesheet Approval Pending Notification"

    Public Const PENDING_TIMEENTRY_NOTIFICATION_INFORMATION_FORM = "Timesheet Notification"
    Public Const PENDING_TIMEENTRY_NOTIFICATION_INFORMATION_FORM_FOR_ADMINISTRATOR = "Timesheet Notification For Administrator"
    Public Const PENDING_TIMEENTRY_NOTIFICATION_INFORMATION_FORM_FOR_EMPLOYEE_MANAGER = "Timesheet Notification For Employee Manager"
    Public Const PENDING_TIMEENTRY_NOTIFICATION_INFORMATION_FORM_FOR_PROJECT_MANAGER = "Timesheet Notification For Project Manager"
    Public Const PENDING_TIMEENTRY_NOTIFICATION_INFORMATION_FORM_FOR_TEAM_LEAD = "Timesheet Notification For Team Lead"

    Public Const TIMESHEET_OVERDUE_NOTIFICATION_INFORMATION_FORM = "Timesheet Overdue Notification"
    Public Const TIMESHEET_OVERDUE_NOTIFICATION_INFORMATION_FORM_FOR_ADMINISTRATOR = "Timesheet Overdue Notification For Administrator"
    Public Const TIMESHEET_OVERDUE_NOTIFICATION_INFORMATION_FORM_FOR_EMPLOYEE_MANAGER = "Timesheet Overdue Notification For Employee Manager"
    Public Const TIMESHEET_OVERDUE_NOTIFICATION_INFORMATION_FORM_FOR_PROJECT_MANAGER = "Timesheet Overdue Notification For Project Manager"
    Public Const TIMESHEET_OVERDUE_NOTIFICATION_INFORMATION_FORM_FOR_TEAM_LEAD = "Timesheet Overdue Notification For Team Lead"

    Public Const EXPENSE_APPROVED_NOTIFICATION_INFORMATION_FROM = "Expense Approved Notification"
    Public Const EXPENSE_REJECTED_NOTIFICATION_INFORMATION_FROM = "Expense Rejected Notification"
    Public Const EXPENSE_APPROVAL_PENDING_NOTIFICATION_INFORMATION_FROM = "Expense Approval Pending Notification"

    Public Const TIME_OFF_APPROVED_NOTIFICATION_INFORMATION_FROM = "Time Off Approved Notification"
    Public Const TIME_OFF_REJECTED_NOTIFICATION_INFORMATION_FROM = "Time Off Rejected Notification"

    Public Const LOAN_APPROVED_NOTIFICATION_INFORMATION_FROM = "Loan Approved Notification"
    Public Const LOAN_REJECTED_NOTIFICATION_INFORMATION_FROM = "Loan Rejected Notification"

    Public Const TIME_OFF_REQUEST_APPROVAL_PENDING_NOTIFICATION_INFORMATION_FROM = "Time Off Request Approval Notification"
    Public Const TIMEOFF_APPROVAL_PENDING_NOTIFICATION_INFORMATION_FROM = "Time Off Approval Notification"

    Public Const EMPLOYEE_LOGIN_INFORMATION_FROM = "MASTMS Login Information"
    Public Const TIMELIVE_DOWNLOAD_INFORMATION_FROM = "MASTMS Download Information"
    Public Const TIMELIVE_DEMO_REQUEST_FROM = "MASTMS Demo Request Information"
    Public Const TIMELIVE_PASSWORD_RESET_INFORMATION_FROM = "MASTMS Password Reset Information"
    Public Const TIMELIVE_PASSWORD_CONFIRM_INFORMATION_FROM = "MASTMS Password Reset Verification"

    Public Const EMAIL_FROM_TIMELIVE_SUPPORT = "info@mastechnology.net"
    Public Const EMAIL_FROM_TIMELIVE_SALES = "info@mastechnology.net"
    Public Const EMAIL_TO_TIMELIVE_SALES = "info@mastechnology.net"

    Public Shared DequeueInProgress As Boolean = False
    Public Shared SystemCurrentDateTime As SMDateTime

    Public Shared Function SendEMail(ByVal Subject As String, ByVal TemplateName As String, ByVal nameValue As StringDictionary, ByVal MailTo As String, Optional ByVal MailToDisplayName As String = "", Optional ByVal MailToCC As String = "", Optional ByVal FromAddressDisplayName As String = "", Optional ByVal FromAddress As String = "", Optional ByVal BCCToSales As Boolean = False) As Boolean

        'LoggingBLL.WriteToLog("Before Create the MailMessage instance" & " " & TemplateName)

        'FromAddressDisplayName = FromAddressDisplayName.Replace("TimeLive", UIUtilities.GetCompanyNameByApplication())
        'If DBUtilities.IsApplicationContext Then
        '    Subject = ResourceHelper.GetFromResource(Subject)
        '    FromAddressDisplayName = ResourceHelper.GetFromResource(FromAddressDisplayName)
        'End If


        'Dim AccountId As Integer
        'Dim drAccountEmployee As AccountEmployee.AccountEmployeeRow
        'Dim objAccountEmployee As New AccountEmployeeBLL
        'drAccountEmployee = objAccountEmployee.GetAccountEmployeesByEmailAddress(MailTo).Rows(0)
        'AccountId = drAccountEmployee.AccountId
        'Subject = ResourceHelper.GetFromResource(Subject, AccountId)
        'FromAddressDisplayName = ResourceHelper.GetFromResource(FromAddressDisplayName, AccountId)


        'If FromAddressDisplayName = "" Then
        '    FromAddressDisplayName = DBUtilities.GetFromEmailAddressDisplayName
        'End If

        'If AccountEmployeeBLL.GetFromEmailAddressDisplayNameByEmailAddress(MailTo) <> "" Then
        '    FromAddressDisplayName = AccountEmployeeBLL.GetFromEmailAddressDisplayNameByEmailAddress(MailTo)
        'End If

        'If FromAddress = "" Then
        '    FromAddress = DBUtilities.GetFromEmailAddress
        'End If

        'If AccountEmployeeBLL.GetFromEmailAddressByEmailAddress(MailTo) <> "" Then
        '    FromAddress = AccountEmployeeBLL.GetFromEmailAddressByEmailAddress(MailTo)
        'End If

        ''(1) Create the MailMessage instance
        'Dim mm As New SmartMassEmail.Entities.EmailMessage

        'With mm
        '    .ID = Guid.NewGuid
        '    .Priority = 0
        '    .EmailSubject = Subject
        '    .EmailTo = MailTo
        '    .EmailCC = FromAddressDisplayName
        '    .EmailFrom = FromAddress
        '    If BCCToSales = True Then
        '        .EmailBCC = EMAIL_TO_TIMELIVE_SALES
        '    End If
        '    .ArrivedDateTime = DateTime.Now
        '    .ChangeStamp = DateTime.Now
        '    .ExpiryDatetime = DateTime.Now.AddDays(1)
        '    .MaximumRetry = 3
        '    .NumberOfRetry = 0
        '    .RetryTime = DateTime.Now
        '    .SenderInfo = "web"
        '    .Status = 0
        '    If TemplateName = "TimeEntryPendingEmployeesTemplate" Or TemplateName = "ExpensePendingTemplate" Or TemplateName = "TimesheetPendingTemplate" Or TemplateName = "TimeEntryPendingTemplate" Or TemplateName = "TimeOffRequestPendingTemplate" Or TemplateName = "TimeOffPendingTemplate" Or TemplateName = "TimesheetOverdueTemplate" Or TemplateName = "TimesheetDueTemplate" Then
        '        .IsHtml = True
        '    End If
        'End With

        'LoggingBLL.WriteToLog("After Create the MailMessage instance" & " " & TemplateName)
        'LoggingBLL.WriteToLog("Before GetTemplatedMessage" & " " & TemplateName)

        'Dim templatedMessage As EmailMessage = EmailTemplate.GetTemplatedMessage(TemplateName, mm, nameValue)

        'LoggingBLL.WriteToLog("After GetTemplatedMessage" & " " & TemplateName)

        'Dim parameters As Object() = New Object() {templatedMessage}
        'EMailUtilities.Send(parameters)

    End Function
    Public Shared Sub Send(ByVal Data As Object)

        Dim templatedMessage As SmartMassEmail.Entities.EmailMessage = Data(0)
        EmailQueue.Send(templatedMessage)

    End Sub
    Public Shared Function GetPreparedNameValue(ByVal message As EmailMessage) As StringDictionary
        Dim dict As New StringDictionary
        dict.Add("[recievername]", "Shahed")
        dict.Add("[sendername]", "Khan")
        dict.Add("[body]", message.EmailBody)
        Return dict

    End Function
    Public Shared Sub DequeueEmail()
        If ATS.BO.UIUtilities.EnableDequeueMailSend() Then
            DequeueEmailWithoutThread()
        End If
    End Sub
    Public Shared Sub DequeueEmailWithoutThread()
        LoggingBLL.WriteToLog("DequeueEmailWithoutThread: Initiated")
        LoggingBLL.WriteToLog("DequeueEmailWithoutThread: DequeueInProgress=" & DequeueInProgress)
        DequeueInProgress = True
        Dim list As TList(Of EmailMessage)
        While True
            list = EmailDeQueue.Recieve
            LoggingBLL.WriteToLog("DequeueEmailWithoutThread: EmailListCount=" & list.Count)
            If list.Count > 0 Then
                EmailDispatchThread(list)
            Else
                Exit While
            End If
        End While
        LoggingBLL.WriteToLog("DequeueEmailWithoutThread: Finished")
        DequeueInProgress = False
    End Sub
    Public Shared Sub EmailDispatchThread(ByVal list As Object)
        LoggingBLL.WriteToLog("EmailDispatchThread: EmailListCount=" & list.Count)
        Dim ParameterizedThreadStart As New ParameterizedThreadStart(AddressOf DispatchThread)
        Dim newThread As New Thread(ParameterizedThreadStart)
        newThread.Priority = ThreadPriority.Highest
        newThread.Start(list)
        Thread.Sleep(10)
    End Sub
    Public Shared Sub DispatchThread(ByVal list As Object)
        EmailDispatch.Dispatch(list)
    End Sub
    Public Function SendEMail(ByVal Subject As String, ByVal Body As String, ByVal MailTo As String, ByVal MailToDisplayName As String, Optional ByVal MailToCC As String = "") As Boolean
        'Dim parameters As Object() = New Object() {Subject, Body, MailTo, MailToDisplayName}
        'Dim pts As New ParameterizedThreadStart(AddressOf Send)
        'Dim t As New Threading.Thread(pts)
        't.Priority = ThreadPriority.Lowest
        't.Name = "Send"
        't.Start(parameters)
    End Function
    Public Shared Function GetTimeZoneId(ByVal AccountEmployeeID As Integer) As Byte
        'Dim dt As AccountEmployee.AccountEmployeeDataTable = New AccountEmployeeBLL().GetAccountEmployeesByAccountEmployeeId(AccountEmployeeID)
        'Dim dr As AccountEmployee.AccountEmployeeRow
        'If dt.Rows.Count > 0 Then
        '    dr = dt.Rows(0)
        '    If Not IsDBNull(dr.Item("TimeZoneId")) Then
        '        'Return dr.TimeZoneId
        '    End If
        'End If
        'Return 6
    End Function
    Public Shared Function SendScheduledEmail()
        SystemCurrentDateTime = SMDateTime.Now
        LoggingBLL.WriteToLog("Initiated:SendScheduledEmail: SystemCurrentDateTime " & SystemCurrentDateTime.ToString)
        'sending scheduled email
        EMailUtilities.SendScheduledEMailForTimesheetApprovalPending()
        EMailUtilities.SendScheduledEMailForExpenseApprovalPending()
        EMailUtilities.SendScheduledEMailForTimeEntryPending()
        EMailUtilities.SendScheduledEMailForTimeEntryPendingForAdministrator()
        EMailUtilities.SendScheduledEMailForTimeEntryPendingForEmployeeManager()
        EMailUtilities.SendScheduledEMailForTimeEntryPendingForProjectManager()
        EMailUtilities.SendScheduledEMailForTimeEntryPendingForTeamLead()
        EMailUtilities.SendScheduledEMailForTimesheetApprovalPendingForTimeOff()
        EMailUtilities.SendScheduledEMailForTimeOffApprovalPending()
        EMailUtilities.SendScheduledEMailForTimesheetDue()
        EMailUtilities.SendScheduledEMailForTimesheetOverdue()
        EMailUtilities.SendScheduledEMailForTimesheetOverdueAdministrator()
        EMailUtilities.SendScheduledEMailForTimesheetOverdueEmployeeManager()
        EMailUtilities.SendScheduledEMailForTimesheetOverdueProjectManager()
        EMailUtilities.SendScheduledEMailForTimesheetOverdueTeamLead()
        'update
        EMailUtilities.UpdateScheduledEMailForTimesheetApprovalPending()
    
        EMailUtilities.UpdateScheduledEMailForTimeOffApprovalPending()
        EMailUtilities.UpdateScheduledEMailForTimesheetApprovalPendingForTimeOff()
        
        LoggingBLL.WriteToLog("Finished:SendScheduledEmail: SystemCurrentDateTime " & SystemCurrentDateTime.ToString & " Now " & Now)
    End Function
    Public Shared Function IsCurrentDaySetForEmail(ByVal dr As DataRow, ByVal UserDate As DateTime) As Boolean
        If [Enum].Format(GetType(DayOfWeek), UserDate.DayOfWeek, "G") = "Monday" Then
            Return dr.Item("Monday")
        ElseIf [Enum].Format(GetType(DayOfWeek), UserDate.DayOfWeek, "G") = "Tuesday" Then
            Return dr.Item("Tuesday")
        ElseIf [Enum].Format(GetType(DayOfWeek), UserDate.DayOfWeek, "G") = "Wednesday" Then
            Return dr.Item("Wednesday")
        ElseIf [Enum].Format(GetType(DayOfWeek), UserDate.DayOfWeek, "G") = "Thursday" Then
            Return dr.Item("Thursday")
        ElseIf [Enum].Format(GetType(DayOfWeek), UserDate.DayOfWeek, "G") = "Friday" Then
            Return dr.Item("Friday")
        ElseIf [Enum].Format(GetType(DayOfWeek), UserDate.DayOfWeek, "G") = "Saturday" Then
            Return dr.Item("Saturday")
        ElseIf [Enum].Format(GetType(DayOfWeek), UserDate.DayOfWeek, "G") = "Sunday" Then
            Return dr.Item("Sunday")
        End If
        Return False
    End Function
    Public Shared Function SendScheduledEMailForTimesheetApprovalPending()
      
    End Function
    'TIme Off Pending Email
    Public Shared Function SendScheduledEMailForTimesheetApprovalPendingForTimeOff()
        'Try
        '    Dim BLL As New AccountEmployeeTimeOffRequestBLL
        '    Dim dt As AccountEmployeeTimeOffRequest.vueAccountEmployeeTimeEntryApprovalPendingEmaiWithPreferencelForTimeOffGroupByApproverEmployeeIdDataTable = BLL.GetPendingTimeEntryApprovalsWithPreferenceTimeEntryForTimeOffGroupByApproverEmployeeId
        '    If dt.Rows.Count > 0 Then
        '        LoggingBLL.WriteToLog("SendScheduledEMailForTimesheetApprovalPendingForTimeOff: Total Employees are " & dt.Rows.Count)
        '        Dim dr As AccountEmployeeTimeOffRequest.vueAccountEmployeeTimeEntryApprovalPendingEmaiWithPreferencelForTimeOffGroupByApproverEmployeeIdRow = dt.Rows(0)
        '        Dim starttime As DateTime = Now
        '        Dim totalemployees As Integer
        '        For Each dr In dt.Rows
        '            If Not LicensingBLL.IsFreeAccount(New AccountEmployeeBLL().GetAccountIdByAccountEmployeeId(dr.ApproverEmployeeId)) Then
        '                Dim TodaySendTime As DateTime
        '                Dim UserCurrentDateTime As DateTime = LocaleUtilitiesBLL.GetCurrentDateTimeFromUserTimeZoneForSMTimeZone(SystemCurrentDateTime, GetTimeZoneId(dr.ApproverEmployeeId))
        '                LoggingBLL.WriteToLog("SendScheduledEMailForTimesheetApprovalPendingForTimeOff: UserCurrentDateTime" & " " & UserCurrentDateTime & " AccountEmployeeId = " & dr.ApproverEmployeeId)
        '                TodaySendTime = LocaleUtilitiesBLL.GetCurrentDateTimeFromUserTimeZoneForSMTimeZone(SystemCurrentDateTime, GetTimeZoneId(dr.ApproverEmployeeId)).Date & " " & AccountEmployeeTimeOffRequestBLL.GetDefaultScheduleEmailSendTime(dr).ToLongTimeString()
        '                LoggingBLL.WriteToLog("SendScheduledEMailForTimesheetApprovalPendingForTimeOff: TodaySendTime" & " " & TodaySendTime & " AccountEmployeeId = " & dr.ApproverEmployeeId)
        '                LoggingBLL.WriteToLog("Now" & " " & Now)
        '                If Not IsDBNull(dr.Item("LastScheduledEmailSentTime")) Then
        '                    LoggingBLL.WriteToLog("SendScheduledEMailForTimesheetApprovalPendingForTimeOff: LastScheduledEmailSentTime" & " " & dr.LastScheduledEmailSentTime.Date & " AccountEmployeeId = " & dr.ApproverEmployeeId)
        '                    If UserCurrentDateTime > TodaySendTime And dr.LastScheduledEmailSentTime.Date < UserCurrentDateTime.Date And IsCurrentDaySetForEmail(dr, UserCurrentDateTime) Then
        '                        Call New AccountEmployeeTimeOffRequestBLL().SendTimeEntryForTimeOffPendingEMail(dr.ApproverEmployeeId)
        '                        LoggingBLL.WriteToLog("SendScheduledEMailForTimesheetApprovalPendingForTimeOff Email recive by this employee: AccountEmployeeId = " & dr.ApproverEmployeeId)
        '                        Call New AccountEmployeeBLL().UpdateIsEmailSendByAccountEmployeeId(dr.ApproverEmployeeId, True)
        '                        LoggingBLL.WriteToLog("SendScheduledEMailForTimesheetApprovalPendingForTimeOff Update IsEmailSend = 1: AccountEmployeeId = " & dr.ApproverEmployeeId)
        '                        totalemployees += 1
        '                    End If
        '                Else
        '                    If UserCurrentDateTime > TodaySendTime And IsCurrentDaySetForEmail(dr, UserCurrentDateTime) Then
        '                        Call New AccountEmployeeTimeOffRequestBLL().SendTimeEntryForTimeOffPendingEMail(dr.ApproverEmployeeId)
        '                        LoggingBLL.WriteToLog("SendScheduledEMailForTimesheetApprovalPendingForTimeOff Email recive by this employee: AccountEmployeeId = " & dr.ApproverEmployeeId)
        '                        Call New AccountEmployeeBLL().UpdateIsEmailSendByAccountEmployeeId(dr.ApproverEmployeeId, True)
        '                        LoggingBLL.WriteToLog("SendScheduledEMailForTimesheetApprovalPendingForTimeOff Update IsEmailSend = 1: AccountEmployeeId = " & dr.ApproverEmployeeId)
        '                        totalemployees += 1
        '                    End If
        '                End If
        '            End If
        '        Next
        '        Dim endtime As DateTime = Now
        '        Dim TotalSecond As Double = (endtime - starttime).TotalSeconds
        '        LoggingBLL.WriteToLog("SendScheduledEMailForTimesheetApprovalPendingForTimeOff TotalSeconds = " & TotalSecond & " totalemployees = " & totalemployees)
        '    End If
        'Catch ex As Exception
        '    LoggingBLL.WriteExceptionToLog("SendScheduledEMailForTimesheetApprovalPendingForTimeOff", ex)
        'End Try
    End Function
    'TIme Off Req Pending Email
    Public Shared Function SendScheduledEMailForTimeOffApprovalPending()
        'Try
        '    Dim BLL As New AccountEmployeeTimeOffRequestBLL
        '    Dim dt As AccountEmployeeTimeOffRequest.vueAccountEmployeeTimeOffRequestApprovalPendingEmailWithPreferenceGroupByApproverEmployeeIdDataTable = BLL.GetPendingTimeOffRequestApprovalsWithPreferenceForGroupByApproverEmployeeId
        '    If dt.Rows.Count > 0 Then
        '        LoggingBLL.WriteToLog("SendScheduledEMailForTimeOffApprovalPending: Total Employees are " & dt.Rows.Count)
        '        Dim dr As AccountEmployeeTimeOffRequest.vueAccountEmployeeTimeOffRequestApprovalPendingEmailWithPreferenceGroupByApproverEmployeeIdRow = dt.Rows(0)
        '        Dim starttime As DateTime = Now
        '        Dim totalemployees As Integer
        '        For Each dr In dt.Rows
        '            If Not LicensingBLL.IsFreeAccount(New AccountEmployeeBLL().GetAccountIdByAccountEmployeeId(dr.ApproverEmployeeId)) Then
        '                Dim TodaySendTime As DateTime
        '                Dim UserCurrentDateTime As DateTime = LocaleUtilitiesBLL.GetCurrentDateTimeFromUserTimeZoneForSMTimeZone(SystemCurrentDateTime, GetTimeZoneId(dr.ApproverEmployeeId))
        '                LoggingBLL.WriteToLog("SendScheduledEMailForTimeOffApprovalPending: UserCurrentDateTime" & " " & UserCurrentDateTime & " AccountEmployeeId = " & dr.ApproverEmployeeId)
        '                TodaySendTime = LocaleUtilitiesBLL.GetCurrentDateTimeFromUserTimeZoneForSMTimeZone(SystemCurrentDateTime, GetTimeZoneId(dr.ApproverEmployeeId)).Date & " " & AccountEmployeeTimeOffRequestBLL.GetDefaultScheduleEmailSendTimeForTimeOff(dr).ToLongTimeString()
        '                LoggingBLL.WriteToLog("SendScheduledEMailForTimeOffApprovalPending: TodaySendTime" & " " & TodaySendTime & " AccountEmployeeId = " & dr.ApproverEmployeeId)
        '                LoggingBLL.WriteToLog("Now" & " " & Now)
        '                If Not IsDBNull(dr.Item("LastScheduledEmailSentTime")) Then
        '                    LoggingBLL.WriteToLog("SendScheduledEMailForTimeOffApprovalPending: LastScheduledEmailSentTime" & " " & dr.LastScheduledEmailSentTime.Date & " AccountEmployeeId = " & dr.ApproverEmployeeId)
        '                    If UserCurrentDateTime > TodaySendTime And dr.LastScheduledEmailSentTime.Date < UserCurrentDateTime.Date And IsCurrentDaySetForEmail(dr, UserCurrentDateTime) Then
        '                        Call New AccountEmployeeTimeOffRequestBLL().SendTimeOffPendingEMail(dr.ApproverEmployeeId)
        '                        LoggingBLL.WriteToLog("SendScheduledEMailForTimeOffApprovalPending Email recive by this employee: AccountEmployeeId = " & dr.ApproverEmployeeId)
        '                        Call New AccountEmployeeBLL().UpdateIsEmailSendByAccountEmployeeId(dr.ApproverEmployeeId, True)
        '                        LoggingBLL.WriteToLog("SendScheduledEMailForTimeOffApprovalPending Update IsEmailSend = 1: AccountEmployeeId = " & dr.ApproverEmployeeId)
        '                        totalemployees += 1
        '                    End If
        '                Else
        '                    If UserCurrentDateTime > TodaySendTime And IsCurrentDaySetForEmail(dr, UserCurrentDateTime) Then
        '                        Call New AccountEmployeeTimeOffRequestBLL().SendTimeOffPendingEMail(dr.ApproverEmployeeId)
        '                        LoggingBLL.WriteToLog("SendScheduledEMailForTimeOffApprovalPending Email recive by this employee: AccountEmployeeId = " & dr.ApproverEmployeeId)
        '                        Call New AccountEmployeeBLL().UpdateIsEmailSendByAccountEmployeeId(dr.ApproverEmployeeId, True)
        '                        LoggingBLL.WriteToLog("SendScheduledEMailForTimeOffApprovalPending Update IsEmailSend = 1: AccountEmployeeId = " & dr.ApproverEmployeeId)
        '                        totalemployees += 1
        '                    End If
        '                End If
        '            End If
        '        Next
        '        Dim endtime As DateTime = Now
        '        Dim TotalSecond As Double = (endtime - starttime).TotalSeconds
        '        LoggingBLL.WriteToLog("SendScheduledEMailForTimeOffApprovalPending TotalSeconds = " & TotalSecond & " totalemployees = " & totalemployees)
        '    End If
        'Catch ex As Exception
        '    LoggingBLL.WriteExceptionToLog("SendScheduledEMailForTimeOffApprovalPending", ex)
        'End Try
    End Function

    Public Shared Function SendScheduledEMailForExpenseApprovalPending()

    End Function
    Public Shared Function SendScheduledEMailForTimeEntryPending()
    
    End Function
    Public Shared Function SendScheduledEMailForTimeEntryPendingForAdministrator()
        
    End Function
    Public Shared Function SendScheduledEMailForTimeEntryPendingForEmployeeManager()
       
    End Function
    Public Shared Function SendScheduledEMailForTimeEntryPendingForProjectManager()
       
    End Function
    Public Shared Function SendScheduledEMailForTimeEntryPendingForTeamLead()
       
    End Function
    Public Shared Function SendScheduledEMailForTimesheetDue()
        
    End Function
    Public Shared Function SendScheduledEMailForTimesheetOverdue()
        
    End Function
    Public Shared Function SendScheduledEMailForTimesheetOverdueAdministrator()
        
    End Function
    Public Shared Function SendScheduledEMailForTimesheetOverdueEmployeeManager()
        
    End Function
    Public Shared Function SendScheduledEMailForTimesheetOverdueProjectManager()
       
    End Function
    Public Shared Function SendScheduledEMailForTimesheetOverdueTeamLead()
       
    End Function
    Public Shared Function UpdateScheduledEMailForTimesheetApprovalPending()
        
    End Function

    Public Shared Function UpdateScheduledEMailForTimeOffApprovalPending()
        'Try
        '    Dim BLL As New AccountEmployeeTimeOffRequestBLL
        '    Dim dt As AccountEmployeeTimeOffRequest.vueAccountEmployeeTimeOffRequestApprovalPendingEmailWithPreferenceGroupByApproverEmployeeIdDataTable = BLL.GetPendingTimeOffRequestApprovalsWithPreferenceForGroupByApproverEmployeeId
        '    If dt.Rows.Count > 0 Then
        '        Dim dr As AccountEmployeeTimeOffRequest.vueAccountEmployeeTimeOffRequestApprovalPendingEmailWithPreferenceGroupByApproverEmployeeIdRow = dt.Rows(0)

        '        For Each dr In dt.Rows
        '            If Not LicensingBLL.IsFreeAccount(New AccountEmployeeBLL().GetAccountIdByAccountEmployeeId(dr.ApproverEmployeeId)) Then
        '                Dim UserCurrentDateTime As DateTime = LocaleUtilitiesBLL.GetCurrentDateTimeFromUserTimeZoneForSMTimeZone(SystemCurrentDateTime, GetTimeZoneId(dr.ApproverEmployeeId))
        '                LoggingBLL.WriteToLog("UpdateScheduledEMailForTimeOffApprovalPending: UserCurrentDateTime" & " " & UserCurrentDateTime & " AccountEmployeeId = " & dr.ApproverEmployeeId)
        '                LoggingBLL.WriteToLog("Now" & " " & Now)
        '                Call New AccountEmployeeBLL().UpdateLastScheduledEmailSentTimeByAccountEmployeeId(dr.ApproverEmployeeId, UserCurrentDateTime)
        '                Call New AccountEmployeeBLL().UpdateIsEmailSendByAccountEmployeeId(dr.ApproverEmployeeId, False)
        '                LoggingBLL.WriteToLog("UpdateScheduledEMailForTimeOffApprovalPending Update IsEmailSend = 0: AccountEmployeeId = " & dr.ApproverEmployeeId)
        '            End If
        '        Next
        '    End If
        'Catch ex As Exception
        '    LoggingBLL.WriteExceptionToLog("UpdateScheduledEMailForTimeOffApprovalPending", ex)
        'End Try
    End Function
    Public Shared Function UpdateScheduledEMailForTimesheetApprovalPendingForTimeOff()
        'Try
        '    Dim BLL As New AccountEmployeeTimeOffRequestBLL
        '    Dim dt As AccountEmployeeTimeOffRequest.vueAccountEmployeeTimeEntryApprovalPendingEmaiWithPreferencelForTimeOffGroupByApproverEmployeeIdDataTable = BLL.GetPendingTimeEntryApprovalsWithPreferenceTimeEntryForTimeOffGroupByApproverEmployeeId
        '    If dt.Rows.Count > 0 Then
        '        Dim dr As AccountEmployeeTimeOffRequest.vueAccountEmployeeTimeEntryApprovalPendingEmaiWithPreferencelForTimeOffGroupByApproverEmployeeIdRow = dt.Rows(0)

        '        For Each dr In dt.Rows
        '            If Not LicensingBLL.IsFreeAccount(New AccountEmployeeBLL().GetAccountIdByAccountEmployeeId(dr.ApproverEmployeeId)) Then
        '                Dim UserCurrentDateTime As DateTime = LocaleUtilitiesBLL.GetCurrentDateTimeFromUserTimeZoneForSMTimeZone(SystemCurrentDateTime, GetTimeZoneId(dr.ApproverEmployeeId))
        '                LoggingBLL.WriteToLog("UpdateScheduledEMailForTimesheetApprovalPendingForTimeOff: UserCurrentDateTime" & " " & UserCurrentDateTime & " AccountEmployeeId = " & dr.ApproverEmployeeId)
        '                LoggingBLL.WriteToLog("Now" & " " & Now)
        '                Call New AccountEmployeeBLL().UpdateLastScheduledEmailSentTimeByAccountEmployeeId(dr.ApproverEmployeeId, UserCurrentDateTime)
        '                Call New AccountEmployeeBLL().UpdateIsEmailSendByAccountEmployeeId(dr.ApproverEmployeeId, False)
        '                LoggingBLL.WriteToLog("UpdateScheduledEMailForTimesheetApprovalPendingForTimeOff Update IsEmailSend = 0: AccountEmployeeId = " & dr.ApproverEmployeeId)
        '            End If
        '        Next
        '    End If
        'Catch ex As Exception
        '    LoggingBLL.WriteExceptionToLog("UpdateScheduledEMailForTimesheetApprovalPendingForTimeOff", ex)
        'End Try
    End Function

End Class
