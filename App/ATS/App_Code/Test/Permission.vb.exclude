Imports Microsoft.VisualBasic
Imports System.Data.SqlClient
Imports TimeLiveDataSetTableAdapters

Public Class Permission

    Public Shared Function GetDefaultPage() As TimeLiveDataSet.SystemSecurityCategoryPageRow
        Dim bll As New AccountRoleBLL
        Dim dt As TimeLiveDataSet.AccountRoleDataTable = bll.GetAccountRolesByAccountIdAndAccountRoleId(DBUtilities.GetSessionAccountId, DBUtilities.GetSessionAccountRoleId)
        Dim dr As TimeLiveDataSet.AccountRoleRow
        If dt.Rows.Count > 0 Then
            dr = dt.Rows(0)
            Dim DefaultPageId As Integer = 0

            If Not IsDBNull(dr.Item("DefaultAccountPageId")) Then
                DefaultPageId = dr.DefaultAccountPageId
                If DefaultPageId = 18 Or DefaultPageId = 19 Then
                    If DBUtilities.GetDefaultTimeEntryMode <> "Period View" Then
                        DefaultPageId = 18
                    Else
                        DefaultPageId = 19
                    End If
                End If
            End If

            If DefaultPageId = 0 Then
                Return Nothing
            End If

            Dim drvue As TimeLiveDataSet.SystemSecurityCategoryPageRow = GetSystemSecurityCategoryPageBySystemSecurityCategoryPageId(DefaultPageId)
            Return drvue
        Else
            Return Nothing
        End If
    End Function

    Public Function GetAccountPageSecurityOfRoles() As DataTable
        GetAccountPageSecurityOfRoles = GetSystemSecurityCategoryPage()
        'ChangeURLsFromPreferencesUpdates(GetAccountPageSecurityOfRoles)
    End Function

    Public Function GetAccountPageSecurityByAccountIdAndSystemSecurityCategoryPageId(ByVal SystemSecurityCategoryPageId As Integer) As DataTable
        Return GetDataBySystemSecurityCategoryPageId(SystemSecurityCategoryPageId)
    End Function

    Public Shared Function GetSystemSecurityCategoryPage() As DataTable
        Dim ds As DataSet = New DataSet
        Dim dt As DataTable = New DataTable
        Dim sql As String

        sql = "SELECT * FROM View_1"



       
        Dim constr As String = System.Configuration.ConfigurationManager.ConnectionStrings("LiveConnectionString").ConnectionString
        Try
            Dim oCon As SqlConnection = New SqlConnection(constr)
            Using oCon
                oCon.Open()
                Dim cmd As New SqlCommand(sql)
                Using cmd
                    'cmd.CommandType = CommandType.StoredProcedure
                    cmd.Connection = oCon


                    Dim Adapter As New SqlDataAdapter

                    Adapter.SelectCommand = cmd
                    Adapter.Fill(ds, "SystemSecurityCategoryPage")
                    dt = ds.Tables(0)
                End Using
            End Using
        Catch ex As Exception
            Dim strEx As String = ex.Message
        End Try
        Return dt
    End Function

    Public Shared Function GetDataBySystemSecurityCategoryPageId(ByVal SystemSecurityCategoryPageId As Integer) As DataTable
        Dim ds As DataSet = New DataSet
        Dim dt As DataTable = New DataTable
        Dim sql As String

        sql = "SELECT * FROM View_1"
        sql = sql & " WHERE SystemSecurityCategoryPageId=" & SystemSecurityCategoryPageId




        Dim constr As String = System.Configuration.ConfigurationManager.ConnectionStrings("LiveConnectionString").ConnectionString
        Try
            Dim oCon As SqlConnection = New SqlConnection(constr)
            Using oCon
                oCon.Open()
                Dim cmd As New SqlCommand(sql)
                Using cmd
                    'cmd.CommandType = CommandType.StoredProcedure
                    cmd.Connection = oCon


                    Dim Adapter As New SqlDataAdapter

                    Adapter.SelectCommand = cmd
                    Adapter.Fill(ds, "Attendance")
                    dt = ds.Tables(0)
                End Using
            End Using
        Catch ex As Exception
            Dim strEx As String = ex.Message
        End Try
        Return dt
    End Function

    Public Shared Function IsPageHasPermissionOf(ByVal SystemSecurityCategoryPageId As Integer, ByVal SystemPermissionId As Integer) As Boolean

        If IsDependentChildPage(SystemSecurityCategoryPageId) Then
            Return True
        End If

        Dim dtPermissions As DataTable = Permission.GetAccountPermissionsOfCurrentRoles()

        Dim dr() As DataRow = dtPermissions.Select("SystemSecurityCategoryPageId = " & SystemSecurityCategoryPageId & " and SystemPermissionId = " & SystemPermissionId)

        If dr.Length > 0 Then
            Return True
        End If

    End Function

    Public Shared Function IsDependentChildPage(ByVal PageId As Integer) As Boolean
        If PageId = 108 Then Return True
        If PageId = 95 Then Return True
        If PageId = 24 Then Return True
        If PageId = 21 Then Return True
        If PageId = 35 Then Return True
        If PageId = 95 Then Return True
        'If PageId = 32 Then Return True
        'If PageId = 37 Then Return True
        If PageId = 86 Then Return True
        'If PageId = 88 Then Return True
        If PageId = 99 Then Return True
        If PageId = 100 Then Return True
        If PageId = 126 Then Return True
    End Function


    Public Shared Function GetAccountPermissionsOfCurrentRoles() As DataTable
        If Not System.Web.HttpContext.Current.Session("PermissionTable") Is Nothing Then
            GetAccountPermissionsOfCurrentRoles = System.Web.HttpContext.Current.Session("PermissionTable")
        Else
            Dim AccountRoles() As String = System.Web.Security.Roles.Provider.GetRolesForUser(System.Web.HttpContext.Current.Session("UserName"))
            System.Web.HttpContext.Current.Session("PermissionTable") = GetpermissionsTable(DBUtilities.GetSessionAccountId, AccountRoles)
            GetAccountPermissionsOfCurrentRoles = System.Web.HttpContext.Current.Session("PermissionTable")
        End If
        'ChangeURLsFromPreferencesUpdates(GetAccountPermissionsOfCurrentRoles)
    End Function

    Public Shared Function GetpermissionsTable(ByVal AccountId As Integer, ByVal AccountRoles As String()) As DataTable
        Dim ds As DataSet = New DataSet
        Dim dt As DataTable = New DataTable
        Dim sql As String

        Dim strRoles As String = ""
        For n As Integer = 0 To AccountRoles.Length - 1
            strRoles = strRoles & "'" & AccountRoles(n) & "'"
            If n + 1 <> AccountRoles.Length Then
                strRoles = strRoles + ","
            End If

        Next

        sql = "select * from vueAccountPagePermission where AccountId =  " & AccountId

        sql = sql + " and Role in (N" & strRoles & ") and (IsSiteMapPage = 1 or ControlLevelPermission = 1) "

        sql = sql + " and ((SystemFeatureId IN (SELECT SystemFeatureId FROM AccountFeatures WHERE (AccountId = " & DBUtilities.GetSessionAccountId & "))) or SystemFeatureId is null) ORDER BY SequenceNumber"

        Dim constr As String = System.Configuration.ConfigurationManager.ConnectionStrings("LiveConnectionString").ConnectionString
        Try
            Dim oCon As SqlConnection = New SqlConnection(constr)
            Using oCon
                oCon.Open()
                Dim cmd As New SqlCommand(sql)
                Using cmd
                    'cmd.CommandType = CommandType.StoredProcedure
                    cmd.Connection = oCon


                    Dim Adapter As New SqlDataAdapter

                    Adapter.SelectCommand = cmd
                    Adapter.Fill(ds, "Attendance")
                    dt = ds.Tables(0)
                End Using
            End Using
        Catch ex As Exception
            Dim strEx As String = ex.Message
        End Try
        Return dt
    End Function


    Public Shared Function IsPageHasRightsByPage(ByVal objPage As Page) As Boolean

        If System.Web.HttpContext.Current.Session("PermissionTable") Is Nothing Then
            Return True
        End If

        Dim ThisPage As String = objPage.AppRelativeVirtualPath
        Dim SlashPos As Integer = InStrRev(ThisPage, "/")
        Dim PageName As String = Right(ThisPage, Len(ThisPage) - SlashPos)

        Dim ThisFolder As String = objPage.AppRelativeTemplateSourceDirectory
        Dim SlashPos1 As String = Right(ThisFolder, Len(ThisFolder) - 2)
        Dim FolderName As String = Left(SlashPos1, Len(SlashPos1) - 1)

        Dim PageId As Integer = GetPageIdByPageName(PageName, FolderName)

        If IsSystemPage(PageId) Then
            Return True
        End If
       

        Return IspageHasRights(PageId)


    End Function

    Public Shared Function GetPageIdByPageName(ByVal strPageName As String, ByVal strFolderName As String) As Integer
        Try


            Dim dtPermissions As TimeLiveDataSet.SystemSecurityCategoryPageDataTable
            dtPermissions = GetSystemSecurityCategoryPages()

            Dim dr() As DataRow = dtPermissions.Select("SystemCategoryPage = '" & strPageName & "' and Folder='" & strFolderName & "'")

            Return dr(0).Item("SystemSecurityCategoryPageId")
        Catch ex As Exception

        End Try

    End Function

    Public Shared Function IsSystemPage(ByVal SystemSecurityCategoryPageId As Integer) As Boolean
        Try


            Dim dtPermissions As DataTable
            dtPermissions = GetSystemSecurityCategoryPages()
            Dim dr() As DataRow = dtPermissions.Select("SystemSecurityCategoryPageId = " & SystemSecurityCategoryPageId)


            If IsDBNull(dr(0).Item("IsSystemPage")) Then
                Return False
            ElseIf dr(0).Item("IsSystemPage") = True Then
                Return True
            Else
                Return False
            End If

        Catch ex As Exception

        End Try
    End Function



    Public Shared Function GetSystemSecurityCategoryPages() As DataTable
        If Not GetItemFromCache("SystemSecurityCategoryPages") Is Nothing Then
            Return CacheManager.GetItemFromCache("SystemSecurityCategoryPages")
        Else
            Dim _SystemSecurityCategoryPageTableAdapter As New TimeLiveDataSetTableAdapters.SystemSecurityCategoryPageTableAdapter
            GetSystemSecurityCategoryPages = _SystemSecurityCategoryPageTableAdapter.GetData
            CacheManager.AddStaticDataInCache(GetSystemSecurityCategoryPages, "SystemSecurityCategoryPages")
            Return GetSystemSecurityCategoryPages
        End If
    End Function

    Public Shared Function IspageHasRights(ByVal SystemSecurityCategoryPageId As Integer, Optional ByVal CheckParent As Boolean = False) As Boolean

        If IsDependentChildPage(SystemSecurityCategoryPageId) Then
            Return True
        End If

        Dim dtPermissions As DataTable = GetAccountPermissionsOfCurrentRoles()

        Dim drPermission As DataRow

        If dtPermissions.Rows.Count > 0 Then
            drPermission = dtPermissions.Rows(0)
            If Not dtPermissions Is Nothing Then
                Dim dr() As DataRow = dtPermissions.Select("SystemSecurityCategoryPageId = " & SystemSecurityCategoryPageId)
                If dr.Length > 0 Then
                    Return True
                End If
            End If
            If CheckParent = True Then
                Return IsParentPageHasRights(SystemSecurityCategoryPageId)
            End If
        End If

    End Function

    Public Shared Function IsParentPageHasRights(ByVal ParentSystemSecurityCateogoryPageId As Integer) As Boolean
        Dim dtPermissions As DataTable = GetAccountPermissionsOfCurrentRoles()
        Dim drPermission As DataRow

        If dtPermissions.Rows.Count > 0 Then
            drPermission = dtPermissions.Rows(0)
            If Not dtPermissions Is Nothing Then
                Dim dr() As DataRow = dtPermissions.Select("ParentSystemSecurityCateogoryPageId = " & ParentSystemSecurityCateogoryPageId)
                If IsDependentChildOfRows(dr) Then
                    Return False
                End If
                If dr.Length > 0 Then
                    Return True
                End If
            End If
        End If


    End Function

    Public Shared Function IsDependentChildOfRows(ByVal objRows() As DataRow) As Boolean
        For n As Integer = 0 To objRows.Length - 1
            If IsDependentChild(objRows(n)("SystemSecurityCategoryPageId")) Then
                Return True
            End If
        Next
    End Function

    Public Shared Function IsDependentChild(ByVal PageId As Integer) As Boolean
        If PageId = 108 Or PageId = 24 Or PageId = 116 Or PageId = 120 Then
            Return True
        End If
    End Function

    Public Shared Function GetItemFromCache(ByVal Key As String) As Object
        Try
            Return System.Web.HttpContext.Current.Session(Key)
        Catch ex As Exception
            Exit Function
        End Try

        ''Return System.Web.HttpContext.Current.Cache.Get(Key)
    End Function

    Public Shared Function GetSystemSecurityCategoryPageBySystemSecurityCategoryPageId(ByVal SystemSecurityCategoryPageId As Integer) As TimeLiveDataSet.SystemSecurityCategoryPageRow
        Return GetSystemSecurityCategoryPages().Select("SystemSecurityCategoryPageId=" & SystemSecurityCategoryPageId)(0)
    End Function


    
End Class
